<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\130\Microsoft.SqlServer.Dac.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\130\Microsoft.SqlServer.Dac.Extensions.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\130\Microsoft.SqlServer.TransactSql.ScriptDom.dll" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="Microsoft.SqlServer.Dac" #>
<#@ import namespace="Microsoft.SqlServer.Dac.Model" #>
<#+

PluralizationService Singularizer = PluralizationService.CreateService(new CultureInfo("en"));

private TSqlModel GenerateModelFromProjectItems(ProjectItems items)
{
    TSqlModel retVal = new TSqlModel(SqlServerVersion.Sql130, new TSqlModelOptions());
    
    AddScriptsToModelRecursive(items, retVal);

    return retVal;
}

private void AddScriptsToModelRecursive(ProjectItems items, TSqlModel model)
{
    foreach (ProjectItem item in items)
    {
        // Ignore non-DDL scripts
        if (item.Name == "Scripts")
            continue;

        if ((0 == string.Compare(item.Kind, EnvDTE.Constants.vsProjectItemKindPhysicalFolder, true)) &&
            item.ProjectItems != null)
        {
            AddScriptsToModelRecursive(item.ProjectItems, model);
        }
        else if (item.Name.EndsWith(".sql", StringComparison.OrdinalIgnoreCase))
            model.AddObjects(File.ReadAllText(item.FileNames[0]));
    }
}

private static (string name, string dataType) GetTableColumnInfo(TSqlObject column)
{
    TSqlObject type = column.GetReferenced(Column.DataType).First();
    string dataType = type.Name.Parts[0];
    bool isNullable = column.GetProperty<bool>(Column.Nullable);

    return (column.Name.Parts[2], GetTypeMapping(dataType, isNullable));
}

private static (string name, string dataType) GetViewColumnInfo(TSqlObject column)
{
    string dataType = "nvarchar";
    bool isNullable = column.GetProperty<bool>(Column.Nullable);

    TSqlObject referencedColumn = column.GetReferenced().FirstOrDefault();
    if (null != referencedColumn)
    {
        TSqlObject type = referencedColumn.GetReferenced(Column.DataType).First();
        dataType = type.Name.Parts[0];
        isNullable = !isNullable ? false : referencedColumn.GetProperty<bool>(Column.Nullable);
    }

    return (column.Name.Parts[2], GetTypeMapping(dataType, isNullable));
}

private static string GetTypeMapping(string sqlTypeName, bool isNullable)
{
    if (sqlTypeName.EndsWith("char"))
        return "string";

    string sysType = "string";
    switch (sqlTypeName)
    {
        case "bigint":
            sysType = "long" + (isNullable ? "?" : string.Empty);
            break;
        case "smallint":
            sysType = "short" + (isNullable ? "?" : string.Empty);
            break;
        case "int":
            sysType = "int" + (isNullable ? "?" : string.Empty);
            break;
        case "uniqueidentifier":
            sysType = "Guid" + (isNullable ? "?" : string.Empty);
            break;
        case "smalldatetime":
        case "datetime":
        case "datetime2":
        case "date":
            sysType = "DateTime" + (isNullable ? "?" : string.Empty);
            break;
        case "time":
            sysType = "TimeSpan" + (isNullable ? "?" : string.Empty);
            break;
        case "float":
            sysType = "double" + (isNullable ? "?" : string.Empty);
            break;
        case "real":
            sysType = "float" + (isNullable ? "?" : string.Empty);
            break;
        case "numeric":
        case "smallmoney":
        case "decimal":
        case "money":
            sysType = "decimal" + (isNullable ? "?" : string.Empty);
            break;
        case "tinyint":
            sysType = "byte" + (isNullable ? "?" : string.Empty);
            break;
        case "bit":
            sysType = "bool" + (isNullable ? "?" : string.Empty);
            break;
        case "image":
        case "binary":
        case "varbinary":
        case "timestamp":
            sysType = "byte[]";
            break;
        case "geography":
            sysType = "Microsoft.SqlServer.Types.SqlGeography" + (isNullable ? "?" : string.Empty);
            break;
        case "geometry":
            sysType = "Microsoft.SqlServer.Types.SqlGeometry" + (isNullable ? "?" : string.Empty);
            break;
    }

    return sysType;
}
#>