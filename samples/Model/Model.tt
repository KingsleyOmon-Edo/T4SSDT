<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ include file="Settings.ttinclude" once="true"#><##>
<#@ include file="..\..\T4SSDT.ttinclude" once="true"#><##>
//------------------------------------------------------------------------------
// <auto-generated>
// T4SSDT Data access layer code generator.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Data;

namespace Model
{
<#
var hostServiceProvider = (IServiceProvider)this.Host;
var dte = (DTE)hostServiceProvider.GetService(typeof(DTE));
TSqlModel model = null;

foreach (Project project in dte.Solution)
{
    if (project.Kind == "{00d1a9c2-b5f0-4af3-8072-f6c62b433612}")
    {
        model = GenerateModelFromProjectItems(project.ProjectItems);
        break;
    }
}
    
if (null == model)
    Error("Database project was not found!");

/********************************************** POCO GENERATOR *********************************************/
void RenderPoco(string name, ColumnInfo[] columns, ColumnInfo[] primaryKey = null)
{
#>
    [GeneratedCode("T4SSDT", "1.0")]
    public partial struct <#= name#>
    {
<# foreach (var column in columns.Where(c => !ExcludeFromPOCO.Contains(c.FullName))) { #>
        public <#= column.TypeName#> <#= column.FieldName#> { get; set; }
<# } #>
    }

<#
}

void RenderTableTypePoco(string name, ColumnInfo[] columns)
{
#>
    [GeneratedCode("T4SSDT", "1.0")]
    public partial class <#= name#> : DataTable
    {
        public <#= name#>()
        {
<# foreach (var column in columns) { #>
            Columns.Add("<#= column.FieldName#>", typeof(<#= column.TypeName#>));
<# } #>
        }

        public void AddRow(
            <#=string.Join(", \r\n            ",
                           columns.Select(c => c.TypeName + " " + ToCamelCase(c.FieldName)))#>)
        {
            Rows.Add(
                <#=string.Join(", \r\n                ", columns.Select(c => ToCamelCase(c.FieldName)))#>);
        }
    }

<#
}

ForEachTable(model, RenderPoco, ExcludeFromPOCO);
ForEachView(model, RenderPoco, ExcludeFromPOCO);
ForEachTableType(model, RenderTableTypePoco, ExcludeFromPOCO);

model.Dispose();
#>
}