<#@ template debug="false" hostspecific="true" inherits="T4Generators.Database.DatabaseModelTransformation" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)Generators\bin\Debug\T4Generators.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="T4Generators.Database" #>
<#@ include file="Model.Settings.ttinclude"#>
//------------------------------------------------------------------------------
// <auto-generated>
// Data access layer code generator.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using Dapper;
using Common.Configuration;

namespace Data
{
<#
    var hostServiceProvider = (IServiceProvider)this.Host;
    var dte = (DTE)hostServiceProvider.GetService(typeof(DTE));
    Project databaseProject = null;
    List<string> targetScripts = new List<string>(64);

    foreach (Project project in dte.Solution)
    {
        if (project.Kind == "{00d1a9c2-b5f0-4af3-8072-f6c62b433612}")
        {
            databaseProject = project;
            break;
        }
    }
    
    if (null == databaseProject)
        Error("Database project was not found!");

    IterateThroughProjectItems(databaseProject.ProjectItems, targetScripts);

    Initialize(targetScripts);

/**************************************** ENUMS GENERATOR ***************************************************/
#>
    [GeneratedCode("DapperGenerator", "1.0")]
    internal enum Views
    {
<#
    PushIndent("        ");

    foreach (var view in Views)
    {
        WriteLine(view.ShortName + ",");
    }

    ClearIndent();
#>
    }

<#

/**************************************** POCO GENERATOR ****************************************************/
    foreach (var table in Tables)
    {
        if (ExcludeFromPOCO.Contains(table.ShortName))
            continue;
#>
    [GeneratedCode("DapperGenerator", "1.0")]
    public partial class <#= table.EntityName #>
    {
<#
        PushIndent("        ");
        foreach (var column in table.Columns)
        {
            if (ExcludeColumnsFromCRUD.Contains(column.FullName))
                continue;
            WriteLine("public {0} {1} {{ get; set; }}", column.ClrType, column.Name);
        }

        ClearIndent();
#>
    }

<#
    }
/******************************************** VIEW RESULTS POCOs ********************************************/
    foreach (var view in Views)
    {
        if (ExcludeFromPOCO.Contains(view.ShortName))
            continue;
#>
    [GeneratedCode("DapperGenerator", "1.0")]
    public partial class <#= view.ShortName #>Item
    {
<#
        PushIndent("        ");
        foreach (var column in view.Columns)
        {
            if (ExcludeColumnsFromCRUD.Contains(column.FullName))
                continue;
            WriteLine("public {0} {1} {{ get; set; }}", column.ClrType, column.Name);
        }

        ClearIndent();    
#>
    }

<#
    }


/***************************************** DATA PROVIDER INTERFACE ******************************************/
#>
    [GeneratedCode("DapperGenerator", "1.0")]
    public partial interface IDataProvider
    {
<#
    PushIndent("        ");
    foreach (var table in Tables)
    {
        if (ExcludeFromCRUD.Contains(table.ShortName))
            continue;

        if (table.IdentityColumn == null || table.PrimaryKey == null)
            continue;

        WriteTableDataProviderInterface(table);
    }

    foreach (var index in Indexes)
    {
        WriteIndexDataProviderInterface(index);
    }

    ClearIndent();
#>
    }

<#
/**************************************** DATA PROVIDER IMPLEMENTATION **************************************/
#>
    [GeneratedCode("DapperGenerator", "1.0")]
    internal partial class DataProvider : IDataProvider
    {
        private readonly DatabaseConfiguration _configuration;
        
        public DataProvider(DatabaseConfiguration configuration)
        {
            _configuration = configuration;
        }
<#
    PushIndent("        ");

    foreach (var table in Tables)
    {
        if (ExcludeFromCRUD.Contains(table.ShortName))
            continue;

        if (table.IdentityColumn == null || table.PrimaryKey == null)
            continue;

        WriteTableDataProviderImplementation(table);
    }

    foreach (var index in Indexes)
    {
        WriteIndexDataProviderImplementation(index);
    }

    ClearIndent();
#>
        private IDbConnection GetRealTimeConnection()
        {
            return new SqlConnection(_configuration.RealTimeConnectionString);
        }

        private IDbConnection GetReadOnlyConnection()
        {
            return new SqlConnection(_configuration.ReadOnlyConnectionString);
        }

        private IDbConnection GetArchiveConnection()
        {
            return new SqlConnection(_configuration.ArchiveConnectionString);
        }
    }    
}

<#+
private void IterateThroughProjectItems(ProjectItems items, List<string> scripts)
{
    foreach (ProjectItem item in items)
    {
        // Ignore non-DDL scripts
        if (item.Name == "Scripts")
            continue;

        if ((0 == string.Compare(item.Kind, EnvDTE.Constants.vsProjectItemKindPhysicalFolder, true)) &&
            item.ProjectItems != null)
        {
            IterateThroughProjectItems(item.ProjectItems, scripts);
        }
        else if (item.Name.EndsWith(".sql", StringComparison.OrdinalIgnoreCase))
            scripts.Add(item.FileNames[0]);
    }
}
#>