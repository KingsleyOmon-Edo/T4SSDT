
//------------------------------------------------------------------------------
// <auto-generated>
// Data access layer code generator.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using Dapper;
using Common.Configuration;

namespace Data
{
    [GeneratedCode("DapperGenerator", "1.0")]
    internal enum Views
    {
        ActiveRepositories,
        HallOfShameReport,
        LatestBuilds,
        RepositoriesStatusReport,
        TodaysBuildsReport,
        TopIssuesReport,
    }

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class Build
	{
        public int BuildId { get; set; }
        public short RepositoryId { get; set; }
        public DateTime BuildDate { get; set; }
        public int DurationMilliseconds { get; set; }
        public short DuplicatesFound { get; set; }
        public byte MaintainabilityIndex { get; set; }
        public short CyclomaticComplexity { get; set; }
        public byte DepthOfInheritance { get; set; }
        public short ClassCoupling { get; set; }
        public int LinesOfCode { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class IssueOwner
	{
        public short UserId { get; set; }
        public int IssueId { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class Issue
	{
        public int IssueId { get; set; }
        public int BuildId { get; set; }
        public int LineNumber { get; set; }
        public string TargetFile { get; set; }
        public string IssueCode { get; set; }
        public string Message { get; set; }
        public string ProjectName { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class ModuleCoverage
	{
        public int BuildId { get; set; }
        public string ModuleName { get; set; }
        public decimal BlocksCoveredPercent { get; set; }
        public decimal LinesCoveredPercent { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class Project
	{
        public string ProjectKey { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class Repository
	{
        public short RepositoryId { get; set; }
        public string ProjectKey { get; set; }
        public string BranchName { get; set; }
        public DateTime LastUpdated { get; set; }
        public bool Deploy { get; set; }
        public bool RunTests { get; set; }
        public bool Analyze { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class TestResult
	{
        public int BuildId { get; set; }
        public string TestName { get; set; }
        public bool Succeeded { get; set; }
        public int DurationMilliseconds { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class User
	{
        public short UserId { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
        public byte[] HashedPassword { get; set; }
        public DateTime Created { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class HallOfShameReportItem
	{
        public string UserName { get; set; }
        public DateTime? Created { get; set; }
        public byte? GlobalRole { get; set; }
        public string IssuesCount { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class RepositoriesStatusReportItem
	{
        public string ProjectKey { get; set; }
        public string BranchName { get; set; }
        public DateTime? LastAnalyzed { get; set; }
        public byte? ResultCode { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class TodaysBuildsReportItem
	{
        public string ProjectKey { get; set; }
        public string BranchName { get; set; }
        public string AnalyzedAt { get; set; }
        public byte? ResultCode { get; set; }
	}

	[GeneratedCode("DapperGenerator", "1.0")]
	public partial class TopIssuesReportItem
	{
        public string IssueCode { get; set; }
        public string SampleMessage { get; set; }
        public string ToolCode { get; set; }
        public string Severity { get; set; }
	}

    [GeneratedCode("DapperGenerator", "1.0")]
    public partial interface IDataProvider
    {
        int Create(Build item);
        int Update(Build item);
        int DeleteBuild(int buildId);
        Build GetBuild(int buildId);
        short Create(Repository item);
        int Update(Repository item);
        int DeleteRepository(short repositoryId);
        Repository GetRepository(short repositoryId);
        short Create(User item);
        int Update(User item);
        int DeleteUser(short userId);
        User GetUser(short userId);
        IEnumerable<Build> GetBuilds(short repositoryId);
        IEnumerable<Issue> GetIssues(int buildId);
        IEnumerable<ModuleCoverage> GetModuleCoverage(int buildId);
        IEnumerable<Repository> GetRepositories(string projectKey);
        IEnumerable<TestResult> GetTestResults(int buildId);
        User GetUser(string userName);
    }

    [GeneratedCode("DapperGenerator", "1.0")]
    internal partial class DataProvider : IDataProvider
    {
        private readonly DatabaseConfiguration _configuration;
        
        public DataProvider(DatabaseConfiguration configuration)
        {
            _configuration = configuration;
        }
        public int Create(Build item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            int newId = connection.ExecuteScalar<int>("INSERT INTO [dbo].[Builds] VALUES(@RepositoryId, @BuildDate, @DurationMilliseconds, @DuplicatesFound, @MaintainabilityIndex, @CyclomaticComplexity, @DepthOfInheritance, @ClassCoupling, @LinesOfCode, @ResultCode);SELECT SCOPE_IDENTITY()", item);
            return newId;
            }
        }
        public int Update(Build item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("UPDATE [dbo].[Builds] SET RepositoryId = @RepositoryId, BuildDate = @BuildDate, DurationMilliseconds = @DurationMilliseconds, DuplicatesFound = @DuplicatesFound, MaintainabilityIndex = @MaintainabilityIndex, CyclomaticComplexity = @CyclomaticComplexity, DepthOfInheritance = @DepthOfInheritance, ClassCoupling = @ClassCoupling, LinesOfCode = @LinesOfCode, ResultCode = @ResultCode WHERE BuildId = @BuildId", item);
            }
        }
        public int DeleteBuild(int buildId)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("DELETE FROM [dbo].[Builds] WHERE buildId = @buildId", new { buildId });
            }
        }
        public Build GetBuild(int buildId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<Build>("SELECT * FROM [dbo].[Builds] WHERE [dbo].[Builds].[BuildId] = @buildId", new { buildId }).SingleOrDefault();
            }
        }
        public short Create(Repository item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            short newId = connection.ExecuteScalar<short>("INSERT INTO [dbo].[Repositories] VALUES(@ProjectKey, @VersionControlSystem, @BranchName, @Status, @LastUpdated, @Deploy, @RunTests, @Analyze);SELECT SCOPE_IDENTITY()", item);
            return newId;
            }
        }
        public int Update(Repository item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("UPDATE [dbo].[Repositories] SET ProjectKey = @ProjectKey, VersionControlSystem = @VersionControlSystem, BranchName = @BranchName, Status = @Status, LastUpdated = @LastUpdated, Deploy = @Deploy, RunTests = @RunTests, Analyze = @Analyze WHERE RepositoryId = @RepositoryId", item);
            }
        }
        public int DeleteRepository(short repositoryId)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("DELETE FROM [dbo].[Repositories] WHERE repositoryId = @repositoryId", new { repositoryId });
            }
        }
        public Repository GetRepository(short repositoryId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<Repository>("SELECT * FROM [dbo].[Repositories] WHERE [dbo].[Repositories].[RepositoryId] = @repositoryId", new { repositoryId }).SingleOrDefault();
            }
        }
        public short Create(User item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            short newId = connection.ExecuteScalar<short>("INSERT INTO [dbo].[Users] VALUES(@UserName, @Email, @HashedPassword, @Created, @GlobalRole);SELECT SCOPE_IDENTITY()", item);
            return newId;
            }
        }
        public int Update(User item)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("UPDATE [dbo].[Users] SET UserName = @UserName, Email = @Email, HashedPassword = @HashedPassword, Created = @Created, GlobalRole = @GlobalRole WHERE UserId = @UserId", item);
            }
        }
        public int DeleteUser(short userId)
        {
            using (var connection = GetRealTimeConnection())
            {
            connection.Open();
            return connection.Execute("DELETE FROM [dbo].[Users] WHERE userId = @userId", new { userId });
            }
        }
        public User GetUser(short userId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<User>("SELECT * FROM [dbo].[Users] WHERE [dbo].[Users].[UserId] = @userId", new { userId }).SingleOrDefault();
            }
        }
        public IEnumerable<Build> GetBuilds(short repositoryId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<Build>("SELECT * FROM [dbo].[Builds] WHERE repositoryId = @repositoryId", new { repositoryId });
            }
        }
        public IEnumerable<Issue> GetIssues(int buildId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<Issue>("SELECT * FROM [dbo].[Issues] WHERE buildId = @buildId", new { buildId });
            }
        }
        public IEnumerable<ModuleCoverage> GetModuleCoverage(int buildId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<ModuleCoverage>("SELECT * FROM [dbo].[ModuleCoverage] WHERE buildId = @buildId", new { buildId });
            }
        }
        public IEnumerable<Repository> GetRepositories(string projectKey)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<Repository>("SELECT * FROM [dbo].[Repositories] WHERE projectKey = @projectKey", new { projectKey });
            }
        }
        public IEnumerable<TestResult> GetTestResults(int buildId)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<TestResult>("SELECT * FROM [dbo].[TestResults] WHERE buildId = @buildId", new { buildId });
            }
        }
        public User GetUser(string userName)
        {
            using (var connection = GetReadOnlyConnection())
            {
            connection.Open();
            return connection.Query<User>("SELECT * FROM [dbo].[Users] WHERE userName = @userName", new { userName }).FirstOrDefault();
            }
        }
        private IDbConnection GetRealTimeConnection()
        {
            return new SqlConnection(_configuration.RealTimeConnectionString);
        }

        private IDbConnection GetReadOnlyConnection()
        {
            return new SqlConnection(_configuration.ReadOnlyConnectionString);
        }

        private IDbConnection GetArchiveConnection()
        {
            return new SqlConnection(_configuration.ArchiveConnectionString);
        }
    }    
}